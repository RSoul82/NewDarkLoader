using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace NewDarkLoader
{
    public class INIFile
    {
        public INIFile(string path)
        {
            iniPath = path;
            storeINIdata();
        }

        private string iniPath;
        private iniData data = new iniData();

        /// <summary>
        /// Updates the ini object only. File must be written to in separate method.
        /// </summary>
        /// <param name="Section"></param>
        /// <param name="Key"></param>
        /// <param name="Value"></param>
        public void IniWriteValue(string Section, string Key, string Value)
        {
            //Update list
            bool found = false;
            foreach (section sec in data.allSections)
            {
                if (sec.secName == Section)
                {
                    for (int i = 0; i < sec.kvPairs.Count; i++) //for each key value pair
                    {
                        if (sec.kvPairs[i].key == Key) //Overwrite key=value
                        {
                            if (Value != null)
                            {
                                keyValue kv = new keyValue();
                                kv.key = Key;
                                kv.value = Value;

                                sec.kvPairs[i] = kv;
                            }
                            else //delete key if null
                            {
                                sec.kvPairs.RemoveAt(i);
                            }

                            found = true;
                            break;
                        }
                    }
                    if (!found) //Write new key=value
                    {
                        keyValue kv = new keyValue();
                        kv.key = Key;
                        kv.value = Value;

                        sec.kvPairs.Add(kv);
                        found = true;
                    }
                }
                if (found) //don't search for any more sections
                    break;
            }

            if (!found) //write new section
            {
                section newSec = new section();
                newSec.secName = Section;

                keyValue newKV = new keyValue();
                newKV.key = Key;
                newKV.value = Value;

                List<keyValue> kvList = new List<keyValue>();
                kvList.Add(newKV);

                newSec.kvPairs = kvList;

                data.allSections.Add(newSec);
            }
        }

        /// <summary>
        /// Reads an ini object and writes its values to the previously specified ini file.
        /// </summary>
        public void writeIniDataToFile()
        {
            //write to file
            List<string> newFileLines = new List<string>();
            newFileLines.Add("DO NOT edit this file while NewDarkLoader is running.");

            foreach (section sec in data.allSections)
            {
                string newSecName = "[" + sec.secName + "]";
                newFileLines.Add(newSecName);
                foreach (keyValue kv in sec.kvPairs)
                {
                    if (kv.value != "" && kv.value != null)
                    {
                        string kvString = kv.key + "=" + kv.value;
                        newFileLines.Add(kvString);
                    }
                }
            }

            string[] linesToWrite = new string[newFileLines.Count];
            newFileLines.CopyTo(linesToWrite);
            File.WriteAllLines(iniPath, linesToWrite, Encoding.Default);
        }

        public string getAllTags(string emptyTag)
        {
            StringBuilder allTags = new StringBuilder();
            foreach (section sec in data.allSections)
            {
                foreach (keyValue kv in sec.kvPairs)
                {
                    if (kv.key.ToLower() == "tags")
                    {
                        if (kv.value != emptyTag)
                            allTags.Append(kv.value + ",");
                    }
                }
            }
            return allTags.ToString().Trim(',');
        }

        public List<catItem> getFMTags(string section)
        {
            List<catItem> tagList = new List<catItem>();
            foreach (section sec in data.allSections)
            {
                if (sec.secName == section)
                {
                    foreach (keyValue kv in sec.kvPairs)
                    {
                        catItem cI = new catItem();
                        tagList.Add(cI);
                    }
                }
            }
            return tagList;
        }

        public string IniReadValue(string Section, string Key)
        {
            bool found = false;
            string val = "";
            foreach (section sec in data.allSections)
            {
                if (sec.secName == Section)
                {
                    foreach (keyValue kv in sec.kvPairs)
                    {
                        if (kv.key == Key)
                        {
                            if (kv.value != null)
                            {
                                val = kv.value.Replace("\\r\\n", " ");
                                found = true;
                                break;
                            }
                        }
                    }
                }
                if (found)
                    break;
            }
            return val;
        }

        /// <summary>
        /// Same as usual read value method but looks for "fmname" section without .size.
        /// </summary>
        public string INIReadValueNoSize(string SectionNoSize, string Key)
        {
            bool found = false;
            string val = "";
            foreach (section sec in data.allSections)
            {
                if (sec.secName.StartsWith(SectionNoSize))
                {
                    foreach (keyValue kv in sec.kvPairs)
                    {
                        if (kv.key == Key)
                        {
                            if (kv.value != null)
                            {
                                val = kv.value.Replace("\\r\\n", " ");
                                found = true;
                                break;
                            }
                        }
                    }
                }
                if (found)
                    break;
            }
            return val;
        }

        private void storeINIdata()
        {
            string[] fileLines = File.ReadAllLines(iniPath, Encoding.Default);
            data.allSections = new List<section>();

            for (int i = 0; i < fileLines.Length; i++)
            {
                string sectionSearch = fileLines[i];
                if (sectionSearch.StartsWith("["))
                {
                    section newSection = new section();

                    string noBrackets = sectionSearch.Replace("[", "");
                    noBrackets = noBrackets.Replace("]", "");
                    newSection.secName = noBrackets;

                    newSection.kvPairs = new List<keyValue>();

                    //Get Key=Value lines
                    for (int j = i + 1; j < fileLines.Length; j++)
                    {
                        string getLine = fileLines[j];
                        if (!getLine.StartsWith("[") && !getLine.StartsWith("\\r\\n"))
                        {
                            string[] splitPairs = getLine.Split('=');
                            //length is 1 or 2
                            keyValue kv = new keyValue();
                            kv.key = splitPairs[0];
                            if (splitPairs.Length == 2)
                                kv.value = splitPairs[1];
                            else
                                kv.value = "";
                            newSection.kvPairs.Add(kv);
                        }
                        else
                            break;
                    }
                    data.allSections.Add(newSection);
                }
                else
                    continue;
            }
        }

        private struct section
        {
            public string secName;
            public List<keyValue> kvPairs;
        }

        private struct keyValue
        {
            public string key;
            public string value;
        }

        private struct iniData
        {
            public List<section> allSections;
        }
    }
}